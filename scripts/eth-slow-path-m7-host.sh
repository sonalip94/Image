#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-3-Clause
#
# Copyright 2021-2022 NXP
#
# This script implements the host machine logic for the L3 forwarding slow path
# through M7 AUTOSAR COM stack scenario using the PFE interfaces of the board.
#
# This scenario presumes having a network route between PFE0 and PFE2 interfaces,
# which belong to a separate network namespace. The host is implied to have 2
# network adapters available in order to handle the TCP/UDP segments injected via
# eth-slow-path-m7.py by the target machine.
#
# The test metrics are available under a report generated by the python script
# This script will take care of setting up the L3 route between the
# two interfaces.

# shellcheck source=docker/scripts/eth-common-host.sh
source "${BASH_SOURCE[0]%/*}/eth-common-host.sh"

readonly m7_load_file="/tmp/m7_load"

# Default values
ns0="nw_ns0"
ns1="nw_ns1"
_set_route() {
    local namespace=$1
    local interface=$2
    local ip=$3

    if [ "${ip}" = "169.254.10.10" ]; then
        ip netns exec "${namespace}" ip route add "169.254.12.0/24" via "169.254.10.12" dev "${interface}"
    else
        ip netns exec "${namespace}" ip route add "169.254.10.0/24" via "169.254.12.12" dev "${interface}"
    fi
}

# Set routing between the two network namespaces
setup_l3_router() {
    ping_return="${GENERAL_ERR}"

    echo "Checking connection to the device"
    _set_ip_for_netns "nw_ns0" "${eth_interface0}" "169.254.10.10"
    ip netns exec nw_ns0 ping -c 4 "169.254.10.12" && ping_return=$?
    if [ ${ping_return} -ne 0 ]; then
        echo "Ports are swapped."
        ip_eth0="169.254.12.10"
        ip_eth1="169.254.10.10"
        ns0="nw_ns1"
        ns1="nw_ns0"
    else
        ip_eth0="169.254.10.10"
        ip_eth1="169.254.12.10"
    fi

    echo "Set IP ${ip_eth0} to ${eth_interface0} in nw_ns0 "
    _set_ip_for_netns "nw_ns0" "${eth_interface0}" "${ip_eth0}"
    echo "Set IP ${ip_eth1} to ${eth_interface1} in nw_ns1 "
    _set_ip_for_netns "nw_ns1" "${eth_interface1}" "${ip_eth1}"

    _set_route "nw_ns0" "${eth_interface0}" "${ip_eth0}"
    _set_route "nw_ns1" "${eth_interface1}" "${ip_eth1}"
}

# Start M7 core load measurement
start_m7_core_load_measurement() {
    local m7_core_load_outfile="${1:-/tmp/m7_core_load}"

    #Clear file
    echo ": >${m7_core_load_outfile}" > "${uart_dev}"

    # Start M7 core load measurement
    echo "m7_core_load.py --outfile ${m7_core_load_outfile} \
                        --monitored-cores 'M7_0' 'M7_1' \
                        --time ${duration}" > "${uart_dev}"
}

# Compute the core load using measurement data from a given file.
compute_core_load() {
    local core_load_file="$1"
    local core_name="$2"

    awk "/^${core_name}/ { total += \$2; count++ } END { core_load = count ? (total / count) : \"No measurement\"; print core_load}" "${core_load_file}"
}

# Log the network performance for both namespaces and the target CPU load.
_print_logs() {
    local m7_0_load=""
    local m7_1_load=""

    if [ -f "${nw1_log}" ]; then
        echo -e "\nNetwork performance data from nw_ns1 to nw_ns0 network space:"
        cat "${nw1_log}"
    fi

    if [ -f "${nw0_log}" ]; then
        echo -e "\nNetwork performance data from nw_ns0 to nw_ns1 network space:"
        cat "${nw0_log}"
    fi

    if [ ! -f "${nw0_log}" ] && [ ! -f "${nw1_log}" ]; then
        exit "${GENERAL_ERR}"
    fi

    # Get log from the target
    _copy_file_over_serial "${m7_load_file}" "${m7_load_file}" > /dev/null

    # Read the series of M7 core loads and compute their average
    m7_0_load=$(compute_core_load "${m7_load_file}" "M7_0")
    m7_1_load=$(compute_core_load "${m7_load_file}" "M7_1")

    echo -e "\nTarget CPU load:\nM7_0 core load: ${m7_0_load}%\nM7_1 core load: ${m7_1_load}%\n"
    echo -e "\nLog files at:"

    [ -f "${nw0_log}" ] && echo "${nw0_log}"
    [ -f "${nw1_log}" ] && echo "${nw1_log}"

    echo "${m7_load_file}"
}

clean_host() {
    # Clear the trap handler to avoid infinite loops.
    set +Ee
    trap - ERR
    _delete_network_ns
}

setup_target() {
    # Reset PFE0 and PFE2 to default mode (FLEXIBLE_ROUTER)
    echo "libfci_cli phyif-update --i emac2 --mode FLEXIBLE_ROUTER --enable --promisc OFF" > "${uart_dev}"
    echo "libfci_cli phyif-update --i emac0 --mode FLEXIBLE_ROUTER --enable --promisc OFF" > "${uart_dev}"
    # Set the interfaces up
    echo "ip link set pfe2 up" > "${uart_dev}"
    echo "ip link set pfe0 up" > "${uart_dev}"
}

set_trap
check_input "$@"
setup_target
setup_host
start_m7_core_load_measurement "${m7_load_file}"
python3 "$(dirname "${BASH_SOURCE[0]}")"/eth_slow_path_m7.py -l "${duration}" -t "${stream_type}" \
        -d "${duplex}" -ns0 "${ns0}" -ns1 "${ns1}" -log "${nw0_log}" "${nw1_log}"
_print_logs
clean_host
